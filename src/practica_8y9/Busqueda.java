/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practica_8y9;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *Interfaz grafica para la busqueda
 * @author Juan Carlos Huerta Llamas
 */
public class Busqueda extends javax.swing.JFrame {
    BusquedaBinaria binaria;
    Paises[] arreglo;
    InfoPaises info;
    /**
     * Creates new form Busqueda
     */
    public Busqueda() {
        initComponents();
        binaria = new BusquedaBinaria();
        arreglo = new Paises[245];
        info = new InfoPaises();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        op1 = new javax.swing.JComboBox();
        op2 = new javax.swing.JComboBox();
        op3 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        texto1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        texto3 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        texto2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Busqueda");

        op1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo", "Pais", "Continente", "Capital" }));

        op2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo", "Pais", "Continente", "Capital" }));

        op3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Codigo", "Pais", "Continente", "Capital" }));

        texto1.setColumns(20);
        texto1.setRows(5);
        jScrollPane1.setViewportView(texto1);

        texto3.setColumns(20);
        texto3.setRows(5);
        jScrollPane2.setViewportView(texto3);

        texto2.setColumns(20);
        texto2.setRows(5);
        jScrollPane3.setViewportView(texto2);

        jButton1.setText("Binary Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Busqueda Binaria");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hashing");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(op1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(151, 151, 151)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(op2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(174, 174, 174)
                        .addComponent(op3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84))))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(124, 124, 124)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(op1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(op2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(op3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        if (op1.getSelectedIndex() == 0) {
            info.Altanumeros(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el codigo a buscar");
             if(respuesta==null){
                 return;
             }
            int buscari = Integer.parseInt(respuesta);
            Paises b = new Paises(respuesta, buscari,"","");
            long inicio = System.currentTimeMillis();
            int a = Arrays.binarySearch(arreglo, b, new ComparaNumeros());
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            System.out.println("tiempo de inicio"+inicio);
            System.out.println("tiempo fin "+fin);
            String cadena = "BinarySearch\n";
            cadena += " " + tiempom + "\n";
            if (a > -1) {
                cadena += arreglo[a].toString() + "\n";

                texto1.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        } else if (op1.getSelectedIndex() == 1){
            info.AltaPaises(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el pais a buscar");
            if(respuesta==null){
                return;
            }
            Paises b = new Paises("", 1,respuesta,"");
            long inicio = System.currentTimeMillis();
            int a = Arrays.binarySearch(arreglo, b, new ComparaPaises());
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            String cadena = "BinarySearch\n";
            cadena += " " + tiempom + "\n";
            if (a > -1) {
                cadena += arreglo[a].toString() + "\n";

                texto1.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }else if (op1.getSelectedIndex() == 2){
            info.AltaContinentes(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el continente a buscar");
            if(respuesta==null){
                return;
            }
            Paises b = new Paises(respuesta, 1,"","");
            long inicio = System.currentTimeMillis();
            int a = Arrays.binarySearch(arreglo, b, new ComparaContinentes());
            int primero=a;
            int ultimo=a;
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            if(a>=0){
                while(primero>0 &&arreglo[primero-1]==b){
                    primero--;
                }
                while(ultimo<arreglo.length-1&&arreglo[ultimo+1]==b){
                    ultimo--;
                }
            }
            for(int i=primero; i<ultimo;i++){
                System.out.println(arreglo[i]);
            }
            String cadena = "BinarySearch\n";
            cadena += " " + tiempom + "\n";
            if (a > -1) {
                
                cadena += arreglo[a].toString() + "\n";

                texto1.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }else if (op1.getSelectedIndex() == 3){
            info.AltaCapitales(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese la capital a buscar");
            if(respuesta==null){
                return;
            }
            Paises b = new Paises("", 1,"",respuesta);
            long inicio = System.currentTimeMillis();
            int a = Arrays.binarySearch(arreglo, b, new ComparaCapitales());
            int primero=a;
            int ultimo=a;
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            if(a>=0){
                while(primero>0 &&arreglo[primero-1]==b){
                    primero--;
                }
                while(ultimo<arreglo.length-1&&arreglo[ultimo+1]==b){
                    ultimo--;
                }
            }
            for(int i=primero; i<ultimo;i++){
                System.out.println(arreglo[i]);
            }
            String cadena = "BinarySearch\n";
            cadena += " " + tiempom + "\n";
            if (a > -1) {
                
                cadena += arreglo[a].toString() + "\n";

                texto1.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        if (op2.getSelectedIndex() == 0) {
            info.Altanumeros(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el codigo a buscar");
            if(respuesta==null){
                 return;
             }
            int buscari = Integer.parseInt(respuesta);
            long inicio = System.currentTimeMillis();
            Paises a = binaria.Busquedabinarianumeros(arreglo, buscari);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            String cadena = "Busqueda binaria\n";
            cadena += " " + tiempom + "\n";
            if (a != null) {
                cadena += a.toString() + "\n";

                texto2.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }

        } else if(op2.getSelectedIndex()==1){
            info.AltaPaises(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el pais a buscar");
            if(respuesta==null){
                 return;
             }
            long inicio = System.currentTimeMillis();
            Paises a = binaria.Busquedabinariapaises(arreglo, respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            String cadena = "Busqueda binaria\n";
            cadena += " " + tiempom + "\n";
            if (a != null) {
                cadena += a.toString() + "\n";

                texto2.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }else if(op2.getSelectedIndex()==2){
            info.AltaContinentes(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese el continente a buscar");
            if(respuesta==null){
                 return;
             }
            long inicio = System.currentTimeMillis();
            Paises a = binaria.Busquedabinariacontinentes(arreglo, respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            String cadena = "Busqueda binaria\n";
            cadena += " " + tiempom + "\n";
            if (a != null) {
                cadena += a.toString() + "\n";

                texto2.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }else if(op2.getSelectedIndex()==3){
            info.AltaCapitales(arreglo);
            String respuesta = JOptionPane.showInputDialog("Ingrese la capital a buscar");
            if(respuesta==null){
                 return;
             }
            long inicio = System.currentTimeMillis();
            Paises a = binaria.Busquedabinariacapital(arreglo, respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            String cadena = "Busqueda binaria\n";
            cadena += " " + tiempom + "\n";
            if (a != null) {
                cadena += a.toString() + "\n";

                texto2.setText(cadena);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro", "Error", JOptionPane.WARNING_MESSAGE);

            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String tiempo = "";

        if (op3.getSelectedIndex() == 0) {        
            info.Altanumeros(arreglo);
            try {

                HashMap<Integer, String> paisn = new HashMap<Integer, String>();

                for (Paises paises : arreglo) {
                    paisn.put(paises.getCodigo(), paises.getPais());
                }

                String respuesta = JOptionPane.showInputDialog("Ingrese el codigo a buscar");
                if(respuesta==null){
                 return;
                }
                int buscarn = Integer.parseInt(respuesta);
                long inicio = System.currentTimeMillis();
                String pais = paisn.get(buscarn);
                long fin = System.currentTimeMillis();

                double tiempom = (double) ((fin - inicio) / 1000);
                String cadena = "Hashing\n";
                cadena += " " + tiempom + " \n";
                cadena += pais + " " + buscarn + "\n";
                texto3.setText(cadena);

            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null, "Solo numeros", "Error", JOptionPane.WARNING_MESSAGE);
                texto3.setText("");
            }
        } else if (op3.getSelectedIndex() == 1){
            HashMap<String, Integer> paisesString = new HashMap<String, Integer>();
            info.AltaPaises(arreglo);
            for (Paises paises : arreglo) {
                paisesString.put(paises.getPais(), paises.getCodigo());
            }
            String respuesta = JOptionPane.showInputDialog("Ingrese el pais a buscar");
            if(respuesta==null){
                 return;
             }
            long inicio = System.currentTimeMillis();
            Integer mm = paisesString.get(respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            if (mm != null ) {
                String cadena = "hashing\n";
                cadena += " " + tiempom + "\n";
                cadena += respuesta +" "+ mm + "\n";
                System.out.println(cadena);
                texto3.setText(new String(cadena));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro " + respuesta, "Error", JOptionPane.WARNING_MESSAGE);
                texto3.setText("");
            }
        }else if (op3.getSelectedIndex() == 2){
            HashMap<String, Integer> paisesString = new HashMap<String, Integer>();
            info.AltaContinentes(arreglo);
            for (Paises paises : arreglo) {
                paisesString.put(paises.getContinente(), paises.getCodigo());
            }
            String respuesta = JOptionPane.showInputDialog("Ingrese el continente a buscar");
            if(respuesta==null){
                 return;
             }
            long inicio = System.currentTimeMillis();
            Integer mm = paisesString.get(respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            if (mm != null ) {
                String cadena = "hashing\n";
                cadena += " " + tiempom + "\n";
                cadena += respuesta + mm + "\n";
                System.out.println(cadena);
                texto3.setText(new String(cadena));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro " + respuesta, "Error", JOptionPane.WARNING_MESSAGE);
                texto3.setText("");
            }
        }else if (op3.getSelectedIndex() == 3){
            HashMap<String, Integer> paisesString = new HashMap<String, Integer>();
            info.AltaCapitales(arreglo);
            for (Paises paises : arreglo) {
                paisesString.put(paises.getCapital(), paises.getCodigo());
            }
                String respuesta = JOptionPane.showInputDialog("Ingrese la capital a buscar");
                if(respuesta==null){
                     return;
                 }
            long inicio = System.currentTimeMillis();
            Integer mm = paisesString.get(respuesta);
            long fin = System.currentTimeMillis();
            double tiempom = (double) ((fin - inicio) / 1000);
            if (mm != null ) {
                String cadena = "Hashing\n";
                cadena += " " + tiempom + "\n";
                cadena += respuesta +" "+ mm + "\n";
                System.out.println(cadena);
                texto3.setText(new String(cadena));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro " + respuesta, "Error", JOptionPane.WARNING_MESSAGE);
                texto3.setText("");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Busqueda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Busqueda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox op1;
    private javax.swing.JComboBox op2;
    private javax.swing.JComboBox op3;
    private javax.swing.JTextArea texto1;
    private javax.swing.JTextArea texto2;
    private javax.swing.JTextArea texto3;
    // End of variables declaration//GEN-END:variables
}
